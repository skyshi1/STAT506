title: "STATS 506"
subtitle: "Final Project"
author: "Sky Shi"
date-modified: today
format:
  html:
    css: style.css
    toc: true
    toc-depth: 5
    toc-expand: 2
    embed-resources: true
editor: visual
---
```{r}
# Load necessary libraries
suppressPackageStartupMessages({
  library(dplyr)
  library(ggplot2)
  library(viridis)
  library(cowplot)
})

# Function to simulate data from different distributions
simulate_data <- function(n, dist_type) {
  if (dist_type == "normal") {
    return(rnorm(n, mean = 0, sd = 1))
  } else if (dist_type == "exponential") {
    return(rexp(n, rate = 1) - 1)  # Centered exponential
  } else if (dist_type == "chi_square") {
    return(rchisq(n, df = 2) - 2)  # Centered chi-square
  } else if (dist_type == "log_normal") {
    return(rlnorm(n, meanlog = 0, sdlog = 1) - exp(0.5))  # Centered log-normal
  } else if (dist_type == "weibull") {
    return(rweibull(n, shape = 1.5, scale = 1) - gamma(1 + 1 / 1.5))  # Centered Weibull
  } else if (dist_type == "mixture") {
    p <- 0.5
    gaussian <- rnorm(n, mean = 0, sd = 1)
    heavy_tail <- rt(n, df = 3)  # Heavy-tailed t-distribution
    return(ifelse(runif(n) < p, gaussian, heavy_tail))
  } else {
    stop("Unknown distribution type")
  }
}

# Simulation parameters
distributions <- c("normal", "exponential", "chi_square", "log_normal", "weibull", "mixture")
sample_sizes <- c(10, 50, 100)
reps <- 10000  # Number of repetitions per condition

# Results storage
results <- list()

# Simulation loop
for (dist in distributions) {
  for (n in sample_sizes) {
    p_values <- numeric(reps)
    t_statistics <- numeric(reps)
    for (i in 1:reps) {
      data <- simulate_data(n, dist)
      t_test <- t.test(data, mu = 0)
      p_values[i] <- t_test$p.value
      t_statistics[i] <- t_test$statistic
    }
    # Store results
    results[[paste(dist, n, sep = "_")]] <- data.frame(
      Distribution = dist,
      SampleSize = n,
      PValue = p_values,
      TStatistic = t_statistics
    )
  }
}

# Combine results into a single data frame
results_df <- do.call(rbind, results)

# Save results for further analysis
write.csv(results_df, "simulation_results.csv", row.names = FALSE)

# Summary of results
summary_results <- results_df %>%
  group_by(Distribution, SampleSize) %>%
  summarize(
    MeanPValue = mean(PValue),
    RejectionRate = mean(PValue < 0.05),
    Variability = sd(TStatistic)
  )
write.csv(summary_results, "summary_results.csv", row.names = FALSE)

# Plotting Functions
# Function to Plot P-Value Distributions
plot_pvalue_distributions <- function(results_df) {
  ggplot(results_df, aes(x = PValue, y = ..density.., fill = Distribution)) +
    geom_histogram(binwidth = 0.05, color = "black", alpha = 0.7) +
    facet_grid(SampleSize ~ Distribution, labeller = labeller(Distribution = label_value)) +
    scale_fill_viridis_d(guide = "none") +  # Use viridis for color coding, but remove legend
    labs(
      title = "P-Value Distributions by Sample Size and Distribution",
      x = "P-Value",
      y = "Density",
      caption = "Sample Size: Rows indicate the respective sample sizes (10, 50, 100)"
    ) +
    theme_classic() +  # White background
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      axis.title.x = element_text(size = 12),
      axis.title.y = element_text(size = 12),
      axis.text = element_text(size = 10),
      strip.text = element_text(size = 10, face = "bold"),
      panel.grid.major = element_line(color = "grey80"),  # Add major grid lines
      panel.grid.minor = element_line(color = "grey90")   # Add minor grid lines
    )
}



plot_rejection_rates <- function(summary_results) {
  ggplot(summary_results, aes(x = factor(SampleSize), y = RejectionRate, fill = Distribution)) +
    geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
    labs(
      title = "Rejection Rates by Distribution and Sample Size",
      x = "Sample Size",
      y = "Rejection Rate"
    ) +
    scale_fill_viridis_d(option = "D", name = "Distribution") +  # Use viridis for consistent coloring
    theme_classic() +  # White background
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      axis.title = element_text(size = 12),
      axis.text = element_text(size = 10),
      legend.title = element_text(size = 12),
      legend.text = element_text(size = 10),
      panel.grid.major = element_line(color = "grey80"),  # Add major grid lines
      panel.grid.minor = element_line(color = "grey90")   # Add minor grid lines
    )
}



plot_tstat_variability <- function(results_df) {
  ggplot(results_df, aes(x = factor(SampleSize), y = TStatistic, fill = Distribution)) +
    geom_boxplot(alpha = 0.7, outlier.color = "red", outlier.size = 1) +
    coord_cartesian(ylim = c(-5, 5)) +  # Adjust the range to focus on the central part
    labs(
      title = "Variability of T-Statistics by Distribution and Sample Size",
      subtitle = "Y-axis truncated to [-5, 5] for better visualization of central data",
      x = "Sample Size",
      y = "T-Statistic"
    ) +
    scale_fill_viridis_d(option = "D", name = "Distribution") +  # Use viridis for consistent coloring
    theme_classic() +  # White background
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12, face = "italic"),
      axis.title = element_text(size = 12),
      axis.text = element_text(size = 10),
      legend.title = element_text(size = 12),
      legend.text = element_text(size = 10),
      panel.grid.major = element_line(color = "grey80"),  # Add major grid lines
      panel.grid.minor = element_line(color = "grey90")   # Add minor grid lines
    ) +
    geom_hline(yintercept = 0, linetype = "dashed", color = "black", size = 0.5)
}




# Generate and Save Plots
pvalue_plot <- plot_pvalue_distributions(results_df)
rejection_rate_plot <- plot_rejection_rates(summary_results)
tstat_variability_plot <- plot_tstat_variability(results_df)

ggsave("plots/pvalue_distributions.png", plot = pvalue_plot, width = 10, height = 6, dpi = 300)
ggsave("plots/rejection_rates.png", plot = rejection_rate_plot, width = 10, height = 6, dpi = 300)
ggsave("plots/tstat_variability.png", plot = tstat_variability_plot, width = 10, height = 6, dpi = 300)
```

Raw examples:
```{r}
# Load necessary libraries
# Function to calculate binwidth dynamically
calculate_binwidth <- function(data) {
  diff(range(data)) / 30  # Divide the range into ~30 bins
}

# Function to simulate raw distributions with downsampling
generate_raw_distribution <- function(n, dist_type) {
  data <- simulate_data(n, dist_type)
  
  # Downsample to 1,000 points if dataset is too large
  if (length(data) > 1000) {
    data <- sample(data, 1000)
  }
  
  # Cap extreme values to reduce distortion (adjust limits if necessary)
  data <- pmin(pmax(data, -5), 5)
  
  binwidth <- calculate_binwidth(data)  # Calculate dynamic binwidth
  ggplot(data.frame(Value = data), aes(x = Value)) +
    geom_histogram(binwidth = binwidth, color = "black", fill = "skyblue", alpha = 0.7) +
    labs(
      title = paste("Distribution Example:", dist_type),
      x = "Value",
      y = "Frequency"
    ) +
    theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
      axis.title = element_text(size = 12)
    )
}

# List of distributions
distributions <- c("normal", "exponential", "chi_square", "log_normal", "weibull", "mixture")
example_plots <- list()

# Generate and save individual plots for each distribution
for (dist in distributions) {
  plot <- generate_raw_distribution(10000, dist)  # Simulate with 10,000 samples
  example_plots[[dist]] <- plot
  ggsave(paste0("plots/raw_distribution_", dist, ".png"), plot = plot, width = 10, height = 6, dpi = 300)
}

# Combine all plots into a single frame
combined_plot <- plot_grid(
  example_plots[["normal"]],
  example_plots[["exponential"]],
  example_plots[["chi_square"]],
  example_plots[["log_normal"]],
  example_plots[["weibull"]],
  example_plots[["mixture"]],
  labels = c("A", "B", "C", "D", "E", "F"),
  ncol = 2,
  label_size = 14
)

# Save the combined plot
ggsave("plots/combined_raw_distributions.png", plot = combined_plot, width = 12, height = 8, dpi = 300)


```